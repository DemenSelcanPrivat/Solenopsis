<project name="Solenopsis" default="help" basedir="." xmlns:sf="antlib:com.salesforce" xmlns:ac="http://ant-contrib.sourceforge.net" xmlns:rh-util="http://www.redhat.com/util" xmlns:rh-sfdc="http://www.redhat.com/sfdc">
    <!-- =========================================================================================== -->

	<!--
		May need to install:
			ftp://ftp.pbone.net/mirror/archive.fedoraproject.org/fedora/linux/releases/9/Everything/x86_64.newkey/os/Packages/ant-1.7.0-1jpp.4.fc9.x86_64.rpm
			ftp://ftp.pbone.net/mirror/archive.fedoraproject.org/fedora/linux/releases/9/Everything/x86_64.newkey/os/Packages/ant-apache-regexp-1.7.0-1jpp.4.fc9.x86_64.rpm
	-->

    <!-- =========================================================================================== -->

	<import file="solenopsis-setup.xml"/>
	<import file="${solenopsis.util.HOME}/rh-util.xml"/>
	<import file="${solenopsis.util.HOME}/sfdc-util.xml"/>

    <!-- =========================================================================================== -->

    <target name="help">
        <echo>
================================
= Solenopsis SFDC Utility Tool =
================================

       Targets
	   -------

Push git related changes from the master environment to the dependent environment (any files removed from git are removed from the dependent env):
    ant -f ${ant.file} git-destructive-push

Push git related changes from the master environment to the dependent environment:
    ant -f ${ant.file} git-push

Manually push files from the master env (please ensure the property sf.files2push is set containing dir/file names):
    ant -f ${ant.file} file-push
	ant -Dsf.files2push="dir1/file1 dir2/file2" ${ant.file} push-files

Manually remove/push files from the master env (please ensure the property sf.files2push and sf.files2remove are set containing dir/file names):
    ant -f ${ant.file} file-destructive-push
	ant -Dsf.files2remove="dir1/file1 dir2/file2" -Dsf.files2push="dir3/file3 dir4/file4" ${ant.file} file-destructive-push

Additive deployment from master environment to dependent environment:
    ant -f ${ant.file} push

Destructive deployment from master environment to dependent environment:
	ant -f ${ant.file} destructive-push

Describe the differences between master environment and dependent environment:
    ant -f ${ant.file} report-diff

Grab complete contents (folder based) from a dependent environment:
    ant -f ${ant.file} pull-full

Grab complete contents (folder based) from a dependent environment to the master:
    ant -f ${ant.file} pull-full-to-master

Grab contents (non folder based) from a dependent environment:
    ant -f ${ant.file} pull

Grab contents (non folder based) from a dependent environment:
    ant -f ${ant.file} pull-to-master

Generate CSVs for objects from the master environment:
    ant -f ${ant.file} generate-objects-csv

Generate a CSV of diffs for objects between the master and dependent environment:
    ant -f ${ant.file} generate-objects-diff-csv

Describe all metadata:
    ant -f ${ant.file} describe-metadata

List metadata (please ensure the property sf.metadataTypes is set - it can be a colon delimited collection):
    ant -Dsf.metadataTypes="metadata type(s)" -f ${ant.file} list-metadata

Display the known environments:
    ant -f ${ant.file} envs

Verify dependent credentials (***TBD***):
    ant -f ${ant.file} verify-credentials

Verify all credentials (***TBD***):
    ant -f ${ant.file} verify-all-credentials

For a list of targets:
    ant -f ${ant.file} -projecthelp


	   Environment
	   -----------

Master:     ${solenopsis.env.MASTER}
Dependent:  ${solenopsis.env.DEPENDENT}

Defined:    ${solenopsis.ENVIRONMENTS}


       Properties
	   ----------

Master environment:      solenopsis.env.MASTER
Dependent environment:   solenopsis.env.DEPENDENT

Environment source dir:  solenopsis.env.[dir name].HOME


Example:
    solenopsis.env.MASTER   = foo
    solenopsis.env.foo.HOME = /tmp/alpha/beta

    The master environment is known as "foo" and its source is located in
    /tmp/alpha/beta

        </echo>
    </target>

    <!-- =========================================================================================== -->

	<target name="git-destructive-push" description="Pushes git changes from the master environment to the dependenent environment.  Any files removed from git are removed from the dependent env">
		<rh-sfdc:git-destructive-push/>
	</target>

	<target name="git-push" description="Pushes git changes from the master environment to the dependenent environment">
		<rh-sfdc:git-push/>
	</target>

	<target name="file-destructive-push" description="Destructive changes of selected files from master environment to dependent environment">
		<rh-util:ifNotSet property="sf.files2push">
			<rh-util:then>
				<rh-util:property name="sf.files2push" value=""/>
			</rh-util:then>
		</rh-util:ifNotSet>

		<rh-util:ifNotSet property="sf.files2remove">
			<rh-util:then>
				<rh-util:property name="sf.files2remove" value=""/>
			</rh-util:then>
		</rh-util:ifNotSet>

		<rh-sfdc:file-push addFileList="${sf.files2push}" removeFileList="${sf.files2remove}"/>
	</target>

	<target name="file-push" description="Additive push of selected files from master environment to dependent environment">
		<fail unless="sf.files2push" message="Must define files to push using the property sf.files2push.  Files should be space delimited in format dir1/file1 dir2/files"/>
		<rh-sfdc:file-push addFileList="${sf.files2push}"/>
	</target>

	<target name="push" description="Additive deployment from master environment to dependent environment">
		<rh-sfdc:push/>
	</target>

	<target name="destructive-push" depends="pull-full, report-diff" description="Destructive deployment from master environment to dependent environment">
		<!--
			As we are dependent on the target report-diff, that target actually sets the
			property entitled report-diff.REMOVE-CHANGES...
		-->
		<rh-sfdc:push destructiveChanges="${report-diff.REMOVE-CHANGES}"/>
	</target>

	<target name="report-diff" description="Describe the differences between master environment and dependent environment">
		<rh-sfdc:diff packageProperty="report-diff.ADD-CHANGES"    reportProperty="report-diff.ADD-REPORT" masterEnv="${solenopsis.env.DEPENDENT}" dependentEnv="${solenopsis.env.MASTER}" operation="Add"/>
		<rh-sfdc:diff packageProperty="report-diff.REMOVE-CHANGES" reportProperty="report-diff.REMOVE-REPORT"/>

		<echo message="===================================================================================="/>
		<echo message="${report-diff.ADD-REPORT}"/>
		<echo message="===================================================================================="/>
		<echo message="${report-diff.REMOVE-REPORT}"/>
		<echo message="===================================================================================="/>
	</target>

	<target name="pull-full" description="Grab complete contents (folder based) from a dependent environment">
		<rh-sfdc:folder-pull/>
	</target>

	<target name="pull-full-to-master" description="Grab complete contents (folder based) from a dependent environment and copy to the master environment">
		<rh-sfdc:folder-pull-to-master/>
	</target>

	<target name="pull" description="Grab contents (non folder based) from a dependent environment">
		<rh-sfdc:non-folder-pull/>
	</target>

	<target name="pull-to-master" description="Grab contents (non folder based) from a dependent environment to the master">
		<rh-sfdc:non-folder-pull-to-master/>
	</target>

	<target name="generate-objects-csv" description="Generate CSV files from object files">
		<rh-sfdc:generate-objects-csv/>
	</target>

	<target name="generate-objects-diff-csv" description="Generate CSV containing diffs in object files between master and dependent environments">
		<rh-sfdc:generate-objects-diff-csv/>
	</target>

	<target name="describe-metadata" description="Describe metadata">
		<rh-sfdc:describe-metadata dependentEnv="${solenopsis.env.DEPENDENT}"/>
	</target>

	<target name="list-metadata" description="List metadata">
		<rh-sfdc:list-metadata dependentEnv="${solenopsis.env.DEPENDENT}" types="${sf.metadataTypes}"/>
	</target>

	<target name="envs" description="Pull standard (nonfolder based) contents from an SFDC environment.  The files pulled will be based on the directories found in ${solenopsis.env.HOME}">
		<echo>
Master:      ${solenopsis.env.MASTER}
Dependent:   ${solenopsis.env.DEPENDENT}
Defined:     ${solenopsis.ENVIRONMENTS}
		</echo>
	</target>

	<target name="verify-credentials" description="Verify dependent credentials">
		<fail message="TBD"/>
	</target>

	<target name="verify-all-credentials" description="Verify all credentials">
		<fail message="TBD"/>
	</target>

    <!-- =========================================================================================== -->
</project>